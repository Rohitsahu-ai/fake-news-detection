# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FwzUjunl5OwgC-jBcwLw0hqr8Bm-T_h-
"""

pip install streamlit

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix, accuracy_score
import seaborn as sns
import matplotlib.pyplot as plt

# Title
st.title("üì∞ Fake News Detection App")
st.markdown("This app lets you analyze and predict whether news is fake or real using ML models.")

# Upload CSV option
uploaded_file = st.file_uploader("Upload your merged news CSV", type=["csv"])

if uploaded_file:
    df = pd.read_csv(uploaded_file)
    df.dropna(subset=['text', 'label'], inplace=True)

    st.subheader("Dataset Preview")
    st.dataframe(df.head())

    # Vectorize text
    X = df['text']
    y = df['label']

    tfidf = TfidfVectorizer(stop_words='english', max_df=0.7)
    X_vectorized = tfidf.fit_transform(X)

    X_train, X_test, y_train, y_test = train_test_split(X_vectorized, y, test_size=0.2, random_state=42)

    # Train models
    lr_model = LogisticRegression()
    lr_model.fit(X_train, y_train)

    rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
    rf_model.fit(X_train, y_train)

    # Predictions
    lr_preds = lr_model.predict(X_test)
    rf_preds = rf_model.predict(X_test)

    # Accuracy
    st.subheader("Model Accuracy")
    st.write(f"Logistic Regression Accuracy: {accuracy_score(y_test, lr_preds) * 100:.2f}%")
    st.write(f"Random Forest Accuracy: {accuracy_score(y_test, rf_preds) * 100:.2f}%")

    # Confusion Matrices
    def plot_conf_matrix(y_true, y_pred, title):
        cm = confusion_matrix(y_true, y_pred)
        fig, ax = plt.subplots()
        sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', ax=ax)
        ax.set_title(title)
        ax.set_xlabel("Predicted")
        ax.set_ylabel("Actual")
        return fig

    with st.expander("üìâ Show Confusion Matrices"):
        st.pyplot(plot_conf_matrix(y_test, lr_preds, "Logistic Regression"))
        st.pyplot(plot_conf_matrix(y_test, rf_preds, "Random Forest"))

    # User Input Prediction
    st.subheader("üîç Try It Out")
    user_input = st.text_area("Enter news text for prediction")
    model_option = st.selectbox("Select model", ["Logistic Regression", "Random Forest"])

    if st.button("Predict"):
        if user_input:
            input_vec = tfidf.transform([user_input])
            if model_option == "Logistic Regression":
                result = lr_model.predict(input_vec)[0]
            else:
                result = rf_model.predict(input_vec)[0]

            if result == "fake":
                st.error("‚ùå This news is predicted as FAKE.")
            else:
                st.success("‚úÖ This news is predicted as REAL.")
        else:
            st.warning("Please enter some news text.")

else:
    st.info("Upload a dataset to begin.")